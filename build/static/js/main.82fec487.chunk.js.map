{"version":3,"sources":["reducers/cart.js","components/Product.js","components/Products.js","components/CartItem.js","components/Cart.js","reducers/products.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["cart","createSlice","name","initialState","items","reducers","addItem","state","action","existingProduct","find","item","id","payload","quantity","push","removeItem","filter","Product","product","dispatch","useDispatch","className","role","aria-label","title","emoji","price","type","disabled","inventory","onClick","actions","Products","allProducts","useSelector","store","products","map","CartItem","Cart","totalPrice","reduce","total","reducer","combineReducers","configureStore","App","counterSlice","value","increment","decrement","incrementByAmount","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82fec487.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const cart = createSlice({\n    name: 'cart',\n    initialState: {\n        items: []\n    },\n    reducers: {\n        addItem: (state, action) => {\n            const existingProduct = state.items.find((item) => item.id === action.payload.id)\n\n            if (existingProduct) {\n                existingProduct.quantity += 1\n            } else {\n                state.items.push({ ...action.payload, quantity: 1 })\n            }\n        },\n        removeItem: (state, action) => {\n            const existingProduct = state.items.find((item) => item.id === action.payload.id)\n\n            if (existingProduct && existingProduct.quantity === 1) {\n                state.items = state.items.filter((item) =>item.id !== action.payload.id)\n            }else if (existingProduct){\n                existingProduct.quantity -= 1\n            }\n        }\n    }\n\n})","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { cart } from '../reducers/cart'\n\n\n \nexport const Product = ({ product }) => {\n    const dispatch = useDispatch()\n    return (\n      \n        <article className=\"product\">\n            <span className=\"emoji\" role=\"img\" aria-label={product.title}><div className=\"title\">{product.title}</div>{product.emoji}</span>\n            <p>{product.price}:-/st</p>\n\n            <button \n            type=\"button\"\n            disabled={product.inventory === 0}\n            onClick={() => dispatch(cart.actions.addItem(product))}>\n                Add to Cart\n            </button>\n        </article>\n   \n    )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Product } from './Product'\n\nexport const Products = () => {\n\n//TODO - fetch all products from the store\nconst allProducts = useSelector ((store) => store.products)\n\nreturn (\n    <div className=\"products\">\n        {allProducts.map((product) => (\n            <Product key={product.id} product={product} />\n        ))}\n    </div>\n)\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { cart } from '../reducers/cart'\n\nexport const CartItem = ({ product }) => {\n    const dispatch = useDispatch()\n    return (\n        <div className=\"all-cart-product\">\n            <div className=\"cart-product\">\n                <div className=\"item-number\">\n                    <span className=\"quantity\">x{product.quantity}</span>\n                    <div className=\"cart-item-emoji\">\n                    <span className=\"emoji\" role=\"img\" aria-label={product.title}>{product.emoji}</span>\n                    </div>\n                </div>\n                <div className=\"info\">\n                    <span className=\"sum\">{product.price * product.quantity}:-</span>\n                </div>\n                <span className=\"actions\">\n                    <button type=\"button\" onClick={() => dispatch(cart.actions.addItem(product))}>➕</button>\n                    <button type=\"button\" onClick={() => dispatch(cart.actions.removeItem(product))}>➖</button>\n\n                </span>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { CartItem } from './CartItem'\n\nexport const Cart = () => {\n    const products = useSelector((store) => store.cart.items)\n    const totalPrice = useSelector((store) => (\n        store.cart.items.reduce((total, item) => (total + (item.price * item.quantity)), 0)\n    ))\n\n    return (\n        \n        <div className=\"cart\">\n            <div className=\"total\">\n            <div className=\"cart-emoji\">  <span className=\"emoji\" role=\"img\" aria-label=\"cart\"> 🛒 </span></div>\n                <div className=\"amount\">Total: {totalPrice}:-</div>\n            </div>\n\n            <ul className=\"items\">\n                {products.map((product) => (\n                    <CartItem key={product.id} product={product} />\n                ))}\n            </ul>\n        </div>\n    )\n}","import  { createSlice } from '@reduxjs/toolkit'\n\nconst productData = [\n    { id: 1, title: 'Broccoli', price: 20, emoji: '🥦' },\n    { id: 2, title: 'Apples', price: 7, emoji: '🍎' },\n    { id: 3, title: 'Carrots', price: 20, emoji: '🥕' },\n    { id: 4, title: 'Lemon', price: 9, emoji: '🍋' },\n    { id: 5, title: 'Carrots', price: 22, emoji: '🥬' },\n    { id: 6, title: 'Onion', price: 4, emoji: '🧅' },\n    { id: 7, title: 'Garlice', price: 6, emoji: '🧄' },\n    { id: 8, title: 'Orange', price: 11, emoji: '🍊' },\n    { id: 9, title: 'Avocado', price: 20, emoji: '🥑' },\n    { id: 10, title: 'Chili', price: 5, emoji: '🌶' },\n    { id: 11, title: 'Grapes', price: 22, emoji: '🍇' },\n    { id: 12, title: 'Tomatos', price: 8, emoji: '🍅' },\n\n\n\n]\n\nexport const products = createSlice({\n    name: 'products',\n    initialState: productData\n})","import React from 'react';\r\nimport { Provider } from 'react-redux'\r\nimport { configureStore, combineReducers } from '@reduxjs/toolkit'\r\nimport { Products } from './components/Products'\r\nimport { Cart } from './components/Cart'\r\n\r\nimport { cart } from './reducers/cart'\r\nimport { products } from './reducers/products'\r\n\r\nconst reducer = combineReducers({\r\n  cart: cart.reducer,\r\n  products: products.reducer\r\n})\r\n\r\nconst store = configureStore({ reducer })\r\n\r\n\r\nexport const App = () => (\r\n  <Provider store={store}>\r\n    <Cart />\r\n    <Products />\r\n  </Provider>\r\n)\r\n \r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}